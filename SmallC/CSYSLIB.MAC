 INCLUDE PROLOG.H
 PUBLIC _errno
_errno DW 0
 PUBLIC _Ucnt
_Ucnt DW 1
 PUBLIC _Uvec
_Uvec DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 PUBLIC _Ustatus
_Ustatus DW 1,2,3
 DW 0,0,0,0,0,0,0
 PUBLIC _Udevice
_Udevice DW 1,1,1
 DW 0,0,0,0,0,0,0
 PUBLIC _Unextc
_Unextc DW -1,-1,-1
 DW 0,0,0,0,0,0,0
 PUBLIC _Ufd
_Ufd DW 0,1,2
 DW 0,0,0,0,0,0,0
 PUBLIC _Umemptr
_Umemptr DW 0
 PUBLIC _Uarg1
_Uarg1 DB 42,0
_CC1:
 PUBLIC _Umain
_Umain:
 CALL _Uparse
 MOV BX,_Ucnt
 PUSH BX  ;
 MOV BX,OFFSET _Uvec
 PUSH BX  ;
 CALL _main
 ADD SP,4
 MOV BX,0
 PUSH BX  ;
 CALL _exit
 ADD SP,2
 RET
 PUBLIC _Uparse
_Uparse:
 SUB SP,4
 MOV BX,2
 ADD BX,SP
 XCHG DX,BX
 MOV BX,128
 MOV SI,DX
 MOV [SI],BX
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 MOV DX,1
 ADD BX,DX
 PUSH BX  ;
 MOV BX,1
 PUSH BX  ;
 CALL _Ualloc
 ADD SP,4
 POP DX
 MOV SI,DX
 MOV [SI],BX
 MOV BX,2
 ADD BX,SP
 PUSH BX  ;
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Ugcmdtl
 ADD SP,2
 POP DX
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Uvec
 XCHG DX,BX
 MOV BX,OFFSET _Uarg1
 MOV SI,DX
 MOV [SI],BX
_CC4:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 OR BX,BX
 JNZ $+5
 JMP _CC5
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 PUSH BX  ;
 CALL _isspace
 ADD SP,2
 OR BX,BX
 JNZ $+5
 JMP _CC6
 MOV BX,0
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 JMP _CC4
_CC6:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 JMP _CC9
_CC10:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,OFFSET _CC3+0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 CALL _Uredirec
 ADD SP,6
 POP DX
 MOV SI,DX
 MOV [SI],BX
 JMP _CC4
_CC11:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV DX,1
 ADD BX,DX
 MOV AL,[BX]
 CBW
 MOV BX,AX
 XCHG DX,BX
 MOV BX,62
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC12
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 MOV DX,1
 ADD BX,DX
 PUSH BX  ;
 MOV BX,OFFSET _CC3+2
 PUSH BX  ;
 MOV BX,1
 PUSH BX  ;
 CALL _Uredirec
 ADD SP,6
 POP DX
 MOV SI,DX
 MOV [SI],BX
 JMP _CC13
_CC12:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,OFFSET _CC3+4
 PUSH BX  ;
 MOV BX,1
 PUSH BX  ;
 CALL _Uredirec
 ADD SP,6
 POP DX
 MOV SI,DX
 MOV [SI],BX
_CC13:
 JMP _CC4
_CC14:
 MOV BX,_Ucnt
 XCHG DX,BX
 MOV BX,20
 CMP DX,BX
 MOV BX,CX
 JGE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC15
 MOV BX,OFFSET _Uvec
 XCHG DX,BX
 MOV BX,_Ucnt
 INC BX
 MOV _Ucnt,BX
 DEC BX
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
_CC15:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Ufield
 ADD SP,2
 POP DX
 MOV SI,DX
 MOV [SI],BX
 JMP _CC8
_CC9:
 CALL _CCSWITCH
 DW _CC10,60
 DW _CC11,62
 DW 0
 JMP _CC14
_CC8:
 JMP _CC4
_CC5:
 ADD SP,4
 RET
_CC3: DB 114,0,97,0,119,0
 PUBLIC _Ugcmdtl
_Ugcmdtl:
  MOV AH,62H  ;Get program segment prefix
  INT 21H
  MOV AX,DS   ;Get our segment
  MOV ES,AX   ;Will be destination
  MOV DS,BX   ;PSP segment is source
  MOV SI,80H  ;Offset to command tail byte count
  MOV CL,[SI] ;Get byte count
  MOV BX,CX   ;Save for return
  INC SI      ;Bump pointer
  POP AX      ;Return address
  POP DI      ;mypt
  PUSH DI     ;Restore
  PUSH AX
  CLD         ;Set direction
  REP MOVSB   ;Move it in
  MOV BYTE PTR ES:[DI],0 ;Move in Null
  MOV AX,ES   ;Restore our segment
  MOV DS,AX
  XOR CX,CX   ;Zero in CX
 RET
 PUBLIC _Ufield
_Ufield:
_CC18:
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 OR BX,BX
 JNZ $+5
 JMP _CC19
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 PUSH BX  ;
 CALL _isspace
 ADD SP,2
 OR BX,BX
 JNZ $+5
 JMP _CC20
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,0
 MOV SI,DX
 MOV [SI],BL
 MOV BX,2
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 RET
_CC20:
 MOV BX,2
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 JMP _CC18
_CC19:
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 RET
 PUBLIC _Uredirec
_Uredirec:
 SUB SP,2
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 POP DX
 MOV SI,DX
 MOV [SI],BX
 MOV BX,8
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Ufield
 ADD SP,2
 POP DX
 MOV SI,DX
 MOV [SI],BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Uopen
 ADD SP,6
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC22
 MOV BX,82
 PUSH BX  ;
 CALL _exit
 ADD SP,2
_CC22:
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,2
 RET
 PUBLIC _Uopen
_Uopen:
 SUB SP,2
 MOV BX,OFFSET _CC23+0
 PUSH BX  ;
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 PUSH BX  ;
 CALL _strchr
 ADD SP,4
 OR BX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC24
 MOV BX,-2
 ADD SP,2
 RET
_CC24:
 MOV BX,OFFSET _Unextc
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,-1
 MOV SI,DX
 MOV [SI],BX
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,OFFSET _CC23+5
 PUSH BX  ;
 CALL _strcmp
 ADD SP,4
 OR BX,BX
 JZ $+5
 JMP _CC25
 MOV BX,OFFSET _Udevice
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,1
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,3
 MOV SI,DX
 MOV [SI],BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,2
 RET
_CC25:
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,OFFSET _CC23+10
 PUSH BX  ;
 CALL _strcmp
 ADD SP,4
 OR BX,BX
 JZ $+5
 JMP _CC26
 MOV BX,OFFSET _Udevice
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,2
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,2
 MOV SI,DX
 MOV [SI],BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,2
 RET
_CC26:
 MOV BX,OFFSET _Udevice
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,0
 MOV SI,DX
 MOV [SI],BX
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 MOV AL,[BX]
 CBW
 MOV BX,AX
 JMP _CC29
_CC30:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,15616
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 POP DX
 MOV SI,DX
 MOV [SI],BX
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC31
 MOV BX,-2
 ADD SP,2
 RET
_CC31:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,1
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Ufd
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
 JMP _CC28
_CC32:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,15618
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 POP DX
 MOV SI,DX
 MOV [SI],BX
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC33
 MOV BX,-2
 ADD SP,2
 RET
_CC33:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,3
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Ufd
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
 JMP _CC28
_CC34:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,15617
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 POP DX
 MOV SI,DX
 MOV [SI],BX
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC35
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,15872
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,16640
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
_CC35:
_CC36:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,15360
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 POP DX
 MOV SI,DX
 MOV [SI],BX
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC37
 MOV BX,-2
 ADD SP,2
 RET
_CC37:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,6
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Ufd
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
 JMP _CC28
_CC38:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,15618
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 POP DX
 MOV SI,DX
 MOV [SI],BX
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC39
 JMP _CC36
_CC39:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,1
 MOV SI,DX
 MOV [SI],BX
 MOV BX,OFFSET _Ufd
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,-1
 PUSH BX  ;
 MOV BX,-1
 PUSH BX  ;
 MOV BX,2
 PUSH BX  ;
 CALL _seek
 ADD SP,8
_CC40:
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _fgetc
 ADD SP,2
 XCHG DX,BX
 MOV BX,-1
 CMP DX,BX
 MOV BX,CX
 JE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC41
 JMP _CC40
_CC41:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,6
 MOV SI,DX
 MOV [SI],BX
 JMP _CC28
_CC29:
 CALL _CCSWITCH
 DW _CC30,114
 DW _CC32,117
 DW _CC34,119
 DW 0
 JMP _CC38
_CC28:
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,2
 RET
_CC23: DB 114,119,97,117,0,67,79,78,58,0
 DB 76,83,84,58,0
 PUBLIC _Uread
_Uread:
 SUB SP,3
 MOV BX,1
 ADD BX,SP
 XCHG DX,BX
 MOV BX,5
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
 MOV BX,7
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Umode
 ADD SP,2
 JMP _CC45
_CC46:
 MOV BX,7
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Useterr
 ADD SP,2
 MOV BX,-1
 ADD SP,3
 RET
_CC47:
_CC48:
 JMP _CC44
_CC45:
 CALL _CCSWITCH
 DW _CC47,1
 DW _CC48,3
 DW 0
 JMP _CC46
_CC44:
 MOV BX,OFFSET _Unextc
 XCHG DX,BX
 MOV BX,7
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,-1
 CMP DX,BX
 MOV BX,CX
 JE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC49
 MOV BX,9
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 DEC BX
 PUSH BX  ;
 MOV BX,OFFSET _Unextc
 XCHG DX,BX
 MOV BX,09
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 POP DX
 MOV SI,DX
 MOV [SI],BL
 MOV BX,OFFSET _Unextc
 XCHG DX,BX
 MOV BX,7
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 XCHG DX,BX
 MOV BX,-1
 MOV SI,DX
 MOV [SI],BX
 MOV BX,5
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 DEC BX
 MOV SI,DX
 MOV [SI],BX
 OR BX,BX
 JZ $+5
 JMP _CC50
 MOV BX,1
 ADD SP,3
 RET
_CC50:
_CC49:
 MOV BX,OFFSET _Udevice
 XCHG DX,BX
 MOV BX,7
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 JMP _CC53
_CC54:
_CC55:
 MOV BX,5
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 DEC BX
 MOV SI,DX
 MOV [SI],BX
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC56
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 CALL _Uconin
 POP DX
 MOV SI,DX
 MOV [SI],BL
 XCHG DX,BX
 MOV BX,26
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC57
 MOV BX,-1
 ADD SP,3
 RET
_CC57:
 MOV BX,9
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 DEC BX
 XCHG DX,BX
 MOV BX,0
 ADD BX,SP
 MOV AL,[BX]
 CBW
 MOV BX,AX
 MOV SI,DX
 MOV [SI],BL
 JMP _CC55
_CC56:
 MOV BX,1
 ADD BX,SP
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,5
 ADD BX,SP
 MOV BX,[BX]
 SUB DX,BX
 MOV BX,DX
 ADD SP,3
 RET
_CC58:
 MOV BX,1
 ADD BX,SP
 PUSH BX  ;
 MOV BX,11
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,9
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,OFFSET _Ufd
 XCHG DX,BX
 MOV BX,13
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,16128
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 POP DX
 MOV SI,DX
 MOV [SI],BX
 XCHG DX,BX
 MOV BX,-2
 CMP DX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC59
 MOV BX,-2
 ADD SP,3
 RET
_CC59:
 MOV BX,1
 ADD BX,SP
 MOV BX,[BX]
 OR BX,BX
 JZ $+5
 JMP _CC60
 MOV BX,7
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Useteof
 ADD SP,2
_CC60:
 MOV BX,1
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,3
 RET
 JMP _CC52
_CC53:
 CALL _CCSWITCH
 DW _CC54,1
 DW 0
 JMP _CC58
_CC52:
 ADD SP,3
 RET
 PUBLIC _Uconin
_Uconin:
 SUB SP,2
_CC62:
 MOV BX,0
 ADD BX,SP
 PUSH BX  ;
 MOV BX,255
 PUSH BX  ;
 CALL _Dcio
 ADD SP,2
 POP DX
 MOV SI,DX
 MOV [SI],BX
 OR BX,BX
 MOV BX,CX
 JNZ $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC63
 JMP _CC62
_CC63:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 JMP _CC66
_CC67:
 MOV BX,0
 PUSH BX  ;
 CALL _exit
 ADD SP,2
_CC68:
_CC69:
 MOV BX,10
 PUSH BX  ;
 CALL _Uconout
 ADD SP,2
 MOV BX,13
 PUSH BX  ;
 CALL _Uconout
 ADD SP,2
 ADD SP,2
 RET
_CC70:
 MOV BX,0
 ADD BX,SP
 XCHG DX,BX
 MOV BX,8
 MOV SI,DX
 MOV [SI],BX
_CC71:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,32
 CMP DX,BX
 MOV BX,CX
 JGE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC72
 MOV BX,94
 PUSH BX  ;
 CALL _Uconout
 ADD SP,2
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 MOV DX,64
 ADD BX,DX
 PUSH BX  ;
 CALL _Uconout
 ADD SP,2
 JMP _CC73
_CC72:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Uconout
 ADD SP,2
_CC73:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,2
 RET
 JMP _CC65
_CC66:
 CALL _CCSWITCH
 DW _CC67,3
 DW _CC68,10
 DW _CC69,13
 DW _CC70,127
 DW 0
 JMP _CC71
_CC65:
 ADD SP,2
 RET
 PUBLIC _Dcio
_Dcio:
  POP SI
  POP DX
  PUSH DX
  PUSH SI
  MOV AH,6   ;Direct I/O
  INT 21H
  JNZ  Dcio1
  XOR AL,AL  ;No char.
Dcio1:
  MOV BL,AL
  XOR BH,BH
 RET
 PUBLIC _Uwrite
_Uwrite:
 SUB SP,2
 MOV BX,0
 ADD BX,SP
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 MOV SI,DX
 MOV [SI],BX
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Umode
 ADD SP,2
 JMP _CC78
_CC79:
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Useterr
 ADD SP,2
 MOV BX,-1
 ADD SP,2
 RET
_CC80:
_CC81:
_CC82:
_CC83:
 JMP _CC77
_CC78:
 CALL _CCSWITCH
 DW _CC80,2
 DW _CC81,3
 DW _CC82,6
 DW _CC83,7
 DW 0
 JMP _CC79
_CC77:
 MOV BX,OFFSET _Udevice
 XCHG DX,BX
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 JMP _CC86
_CC87:
_CC88:
 MOV BX,4
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 DEC BX
 MOV SI,DX
 MOV [SI],BX
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC89
 MOV BX,8
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 DEC BX
 MOV AL,[BX]
 CBW
 MOV BX,AX
 PUSH BX  ;
 CALL _Dcio
 ADD SP,2
 JMP _CC88
_CC89:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 SUB DX,BX
 MOV BX,DX
 ADD SP,2
 RET
_CC90:
_CC91:
 MOV BX,4
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 DEC BX
 MOV SI,DX
 MOV [SI],BX
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC92
 MOV BX,8
 ADD BX,SP
 MOV DX,BX
 MOV BX,[BX]
 INC BX
 MOV SI,DX
 MOV [SI],BX
 DEC BX
 MOV AL,[BX]
 CBW
 MOV BX,AX
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,1280
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 JMP _CC91
_CC92:
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 SUB DX,BX
 MOV BX,DX
 ADD SP,2
 RET
_CC93:
 MOV BX,8
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,OFFSET _Ufd
 XCHG DX,BX
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,16384
 PUSH BX  ;
 CALL _Umsdos
 ADD SP,8
 ADD SP,2
 RET
 JMP _CC85
_CC86:
 CALL _CCSWITCH
 DW _CC87,1
 DW _CC90,2
 DW 0
 JMP _CC93
_CC85:
 ADD SP,2
 RET
 PUBLIC _Uconout
_Uconout:
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _Dcio
 ADD SP,2
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 RET
 PUBLIC _Umode
_Umode:
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,10
 CMP DX,BX
 MOV BX,CX
 JAE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC96
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 MOV BX,[BX]
 RET
_CC96:
 MOV BX,0
 RET
 PUBLIC _Useteof
_Useteof:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 PUSH BX  ;
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,4
 OR BX,DX
 POP DX
 MOV SI,DX
 MOV [SI],BX
 RET
 PUBLIC _Uclreof
_Uclreof:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 PUSH BX  ;
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,-5
 AND BX,DX
 POP DX
 MOV SI,DX
 MOV [SI],BX
 RET
 PUBLIC _Useterr
_Useterr:
 MOV BX,OFFSET _Ustatus
 XCHG DX,BX
 MOV BX,2
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,BX
 ADD BX,DX
 PUSH BX  ;
 MOV BX,[BX]
 XCHG DX,BX
 MOV BX,8
 OR BX,DX
 POP DX
 MOV SI,DX
 MOV [SI],BX
 RET
 PUBLIC _Ualloc
_Ualloc:
 SUB SP,2
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 MOV BX,1
 PUSH BX  ;
 CALL _avail
 ADD SP,2
 POP DX
 CMP DX,BX
 MOV BX,CX
 JAE $+3
 INC BX
 OR BX,BX
 JNZ $+5
 JMP _CC101
 MOV BX,4
 ADD BX,SP
 MOV BX,[BX]
 OR BX,BX
 JNZ $+5
 JMP _CC102
 MOV BX,_Umemptr
 PUSH BX  ;
 MOV BX,0
 PUSH BX  ;
 MOV BX,10
 ADD BX,SP
 MOV BX,[BX]
 PUSH BX  ;
 CALL _pad
 ADD SP,6
_CC102:
 MOV BX,0
 ADD BX,SP
 XCHG DX,BX
 MOV BX,_Umemptr
 MOV SI,DX
 MOV [SI],BX
 MOV BX,_Umemptr
 XCHG DX,BX
 MOV BX,6
 ADD BX,SP
 MOV BX,[BX]
 ADD BX,DX
 MOV _Umemptr,BX
 MOV BX,0
 ADD BX,SP
 MOV BX,[BX]
 ADD SP,2
 RET
_CC101:
 MOV BX,0
 ADD SP,2
 RET
 PUBLIC _Umsdos
_Umsdos:
  POP SI  ;Return address
  POP AX  ;Load all the registers
  POP BX
  POP CX
  POP DX
  PUSH DX  ;Now restore them
  PUSH CX
  PUSH BX
  PUSH AX
  PUSH SI
  INT 21H  ;Issue the call do DOS
  JNC UMSDOS1  ;Jump if no error
  MOV _ERRNO,AX
  MOV AX,-2    ;ERR
UMSDOS1:
  MOV BX,AX
  XOR CX,CX    ;Zero in CX
 RET
 EXTRN _strchr:NEAR
 EXTRN _fgetc:NEAR
 EXTRN _strcmp:NEAR
 EXTRN _avail:NEAR
 EXTRN _exit:NEAR
 EXTRN _seek:NEAR
 EXTRN _isspace:NEAR
 EXTRN _pad:NEAR
 EXTRN _main:NEAR
 EXTRN _CCSWITCH:NEAR
 INCLUDE EPILOG.H
 END
